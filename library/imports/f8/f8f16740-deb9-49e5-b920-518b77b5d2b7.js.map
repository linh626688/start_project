{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Star.js"],"names":["cc","Class","extends","Component","properties","pickRadius","getPlayerDistance","playerPos","game","player","getPosition","dist","pDistance","node","position","onPicked","spawnNewStar","gainScore","destroy","start","update","dt"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACR;AACAC,oBAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBQ,KAHP;AAsBLC,uBAAmB,6BAAY;AAC3B;AACA,YAAIC,YAAY,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,WAAjB,EAAhB;AACA;AACA,YAAIC,OAAOX,GAAGY,SAAH,CAAa,KAAKC,IAAL,CAAUC,QAAvB,EAAiCP,SAAjC,CAAX;AACA,eAAOI,IAAP;AACH,KA5BI;;AA8BLI,cAAU,oBAAW;AAChB;AACA,aAAKP,IAAL,CAAUQ,YAAV;AACA;AACA,aAAKR,IAAL,CAAUS,SAAV;AACA;AACA,aAAKJ,IAAL,CAAUK,OAAV;AACJ,KArCI;;AAuCL;;AAEA;;AAEAC,SA3CK,mBA2CI,CAER,CA7CI;AA+CLC,UA/CK,kBA+CGC,EA/CH,EA+CO;AACR;AACA,YAAI,KAAKf,iBAAL,KAA2B,KAAKD,UAApC,EAAgD;AAC5C;AACA,iBAAKU,QAAL;AACA;AACH;AACJ;AAtDI,CAAT","file":"Star.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // When the distance between the star and main character is less than this value, collection of the point will be completed\n        pickRadius: 0,\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n    getPlayerDistance: function () {\n        // judge the distance according to the position of the player node\n        var playerPos = this.game.player.getPosition();\n        // calculate the distance between two nodes according to their positions\n        var dist = cc.pDistance(this.node.position, playerPos);\n        return dist;\n    },\n\n    onPicked: function() {\n         // when the stars are being collected, invoke the interface in the Game script to generate a new star\n         this.game.spawnNewStar();\n         // invoke the scoring method of the Game script\n         this.game.gainScore();\n         // then destroy the current star's node\n         this.node.destroy();\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n\n    update (dt) {\n        // judge if the distance between the star and main character is shorter than the collecting distance for each frame\n        if (this.getPlayerDistance() < this.pickRadius) {\n            // invoke collecting behavior\n            this.onPicked();\n            return;\n        }\n    },\n});\n"]}