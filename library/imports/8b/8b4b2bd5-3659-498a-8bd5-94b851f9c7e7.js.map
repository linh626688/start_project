{"version":3,"sources":["../../../../assets/scripts/assets/scripts/Player.js"],"names":["cc","Class","extends","Component","properties","jumpHeight","jumpDuration","maxMoveSpeed","accel","setJumpAction","jumpUp","moveBy","p","easing","easeCubicActionOut","jumpDown","easeCubicActionIn","repeatForever","sequence","setInputControl","self","systemEvent","on","SystemEvent","EventType","KEY_DOWN","event","keyCode","KEY","a","accLeft","d","accRight","KEY_UP","onLoad","jumpAction","node","runAction","xSpeed","start","update","dt","Math","abs","x"],"mappings":"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","file":"Player.js","sourceRoot":"../../../../assets/scripts","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/class.html\n// Learn Attribute:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/reference/attributes.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/creator/en/scripting/life-cycle-callbacks.html\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n          // main character's jump height\n          jumpHeight: 0,\n          // main character's jump duration\n          jumpDuration: 0,\n          // maximal movement speed\n          maxMoveSpeed: 0,\n          // acceleration\n          accel: 0,\n        // foo: {\n        //     // ATTRIBUTES:\n        //     default: null,        // The default value will be used only when the component attaching\n        //                           // to a node for the first time\n        //     type: cc.SpriteFrame, // optional, default is typeof default\n        //     serializable: true,   // optional, default is true\n        // },\n        // bar: {\n        //     get () {\n        //         return this._bar;\n        //     },\n        //     set (value) {\n        //         this._bar = value;\n        //     }\n        // },\n    },\n    setJumpAction: function () {\n        // jump up\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.p(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // jump down\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.p(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // repeat\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown));\n    },\n\n    setInputControl: function () {\n        var self = this;\n        // add keyboard event listener\n        // When there is a key being pressed down, \n        // judge if it's the designated directional button and set up acceleration in the corresponding direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, function (event){\n            switch(event.keyCode) {\n                case cc.KEY.a:\n                    self.accLeft = true;\n                    break;\n                case cc.KEY.d:\n                    self.accRight = true;\n                    break;\n            }\n        });\n\n        // when releasing the button, stop acceleration in this direction\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, function (event){\n            switch(event.keyCode) {\n                case cc.KEY.a:\n                    self.accLeft = false;\n                    break;\n                case cc.KEY.d:\n                    self.accRight = false;\n                    break;\n            }\n        });        \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad: function () {\n        // initialize jump action\n        this.jumpAction = this.setJumpAction();\n        this.node.runAction(this.jumpAction);\n\n        // switch of acceleration direction\n        this.accLeft = false;\n        this.accRight = false;\n        // current horizontal speed of main character\n        this.xSpeed = 0;\n\n        // initialize keyboard input listener\n        this.setInputControl();\n    },\n\n    start () {\n\n    },\n\n    update (dt) {\n        // update speed of each frame according to the current acceleration direction\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        }\n        // restrict the movement speed of the main character to the maximum movement speed\n        if ( Math.abs(this.xSpeed) > this.maxMoveSpeed ) {\n            // if speed reaches its limit, use the max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // update the position of the main character according to the current speed\n        this.node.x += this.xSpeed * dt;\n    },\n});\n"]}